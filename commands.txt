1.clone a repository
 -git clone <remote repo url>
  create local copy of remote repo  
 -git cone <url> <dir name>
  create local copy of remote repo in given directory
 -git clone <shortname> <url>
  create clone with <remote shortname> as mentioned

2.git help for command
 -git help <verb>
 -git <verb> -h/-help
 -man git-<verb>

3.convert a project dir to git repo dir
 -git init <project dir>
  create .git dir for the project and convert it to a git project
 -git init
 run this if inside  a project dir

4.check list of remote shortname configured
 -git remote -v
  see all remote shortname configured
 
 
5.git status
 -git status
 -git status -s
 output: <c1><c2> ...
 c1 -staging area 
 c2-working directory 

6. add files to staging area.
 -git add <file1> <file2>
 
7.commiting  files from staging area
 -git commit -m "commit message"
  
8.commiting files from working directory directly
 -git commit -am "commit message"
9. git diff 
 -git diff
  diff of working dir and staging are
 -git diff --staged
  diff of staging area and last commit.
10.remove files from git repo
 -rm <file1> 
 -git add <file1>
 -git commit -m "remove files"
11.commit history
 -git log
12.remote shortnames
 -git remote -v
  show all remote shortname details
 -git remote add <remote shortname> <remote repo url>
  add a shortname for remote repo
13.fetch/pull from remote
  -git fetch <remote shorname>
   fetch changes from remote into local repo  <shorname>/<branch>.
  -git pull <shortname> <branch>
   pull all changes to local repo <shorname>/<branch> and merge to local tracking branch <branch> as well.
   
14.push code to remote
  -git push <shortname> <branch>
   ex: git push origin master
  -git push <shortname> <local branch>:<remote branch> 
  -git push 
   if local branch is already traking remote branch.
15. inspecting remote 
  -git remote show <remote shortname>
  -git ls-remote
  -git remote remove <shortname>
  -git remote rename <old shortname> <new shortname>
16.Tagging in git.
  -git tag -l/--list
   see list of tags
  -git tag -a <tag name> -m "message for tag"
   create an annotated tag
  -git tag -a <tag name> <commit hash> -m "message for tag"
   create an annotated tag wrt a commit
  -git push <remote shortname> <tagname>
   push tag to remote server
  -git push <remote shortname> --tags
   push all tags to remote server
  -git tag -d <tag name>
   delete a local tag
  -git push <shortname> --delete <tag name>
   delete remote tag
  -git push <shortname> :refs/tags/<tagname>
   delete remote tag 
17. work with tag
  -git checkout tag
  -git checkout -b <branch>
18.git aliases
 -git config --global alias.co checkout
  so now we can use co instead of checkout.
  ex: git co <branch>
19.working with branch
 -git branch <branch name>
  create a branch
 -git checkout <branc name>
  switch HEAD to a branch
 -git checkout -b <local branch> <master branch>
  switch to <local branch> whose parent is last commit of <master branch>
 -*git checkout <master branch>
  *git merge <dev branch>
  merge <dev branch> to <master branch> 
 -git branch -d <branch name>
  delete a branch
 -git branch -D <branch name>
  delete a branch forcefully
 -git push <remote shortname> --delete <branch name> 
  delete remote branch
 -git branch
  list all branch and point the current branch
 -git branch -v
  list branch with last commit 
 -git branch -vv
  see tracking branch of local branch 
 -git branch --merged
 -git branch --no-merged
 -*git checkout local
  *git branch --no-merged <master branch>
  check what is not merged from local to master
20. tracking branches 
 -git checkout -b <local branch> <remote shortname>/<remote branch>
  create a local branch which track a remote branch
 -git checkout <branch> <remote shortname>/<remote branch>   
 -git checkout --track <remote shortname>/<branch>
 -git checkout <branch> 
  if <branch> exist in remote server configured locally(shortname created already)
  then it will create local branch which tracks <remote>/<branch> 
 -git branch -u <remote shortname>/<branch> <local branch>
  set upstream branch for existing  <local branch> 
 -git branch --set-upstream-to=<remote shortname>/<branch> <local branch>
  set upstream branch for existing <local branch>
21.git rebase as alternative to merge
  step1:
  -git checkout <dev branch>
  -git rebase <master branch>
   Now,dev branch will be having latest commit of master and on top of that all changes of dev branch with new commit has.
  step 2:
  -git checkout <master branch>
  -git merge <dev branch>  
   So new commits from <dev branch> will be fadst-forward merged to <master branch>
22.commits diff across branches
  -git log <master branch>..<dev branch>
   get commits in <dev branch> which are not there in <master branch>
  -*git log <remote shortname>/<branch>..HEAD 
   *git log <remote shortname>/< branch>..
   list of commits going to be pushed to remote repository.
   ex: git log origin/master..HEAD
  -git log <branch1> --not <branch2> <branch3>
   list the commits available in branch1 but not in branch 2 and branch 3
  -git diff <branch1>..<branch2>
  -git diff <commit1> <commit2>
23.squash the commits   
 -*git checkout -b <dev clone branch > <remote shortname>/<branch>
  *git merge --squash <dev branch> 
  *git commit -m "singl commit message" 
  *git push <remote shortname> <dev clone branch> 
  --squash option provide functionality to take all commits changes from <dev branch> and
  apply on <dev clone branch> like merge but without commiting it.

24.git merge-base
 -git merge-base <branch1> <branch2>
  get common commit of both branch

25.cherry pick
 -*git checkout <master branch>
  *git cherry-pick <commit hash>
  pick the commit from dev branch and apply to master branch

26.generating build number
  -git describe <master branch> 
   for Annotated tag
  -git describe <master branch> --tag
   for lightweight tag
27.preparing release
  -git archieve <master branch> --prefix='project/'|gzip `git describe <master branch>`.tar.gz
  -git archieve <master branch> --prefix='project/' --format=zip >'git describe <master branch>'.zip

28.project maintainence
 -git format-patch -M <remote shortname>/branch>
 -git apply --check <patch file>
 -git apply <patch file>
  apply patch if created by git diff
 -git am <patch file> 
  apply patch if created by git format-patch command
 -git am --resolved
 -git am -3 <patch file>
 -git request-pull <remote shorname>/<branch> <remote shorname>


